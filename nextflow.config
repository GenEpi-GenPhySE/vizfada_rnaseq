/*
 * Copyright (c) 2013-2019, Centre for Genomic Regulation (CRG).
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This Source Code Form is "Incompatible With Secondary Licenses", as
 * defined by the Mozilla Public License, v. 2.0.
 *
 */
  
manifest {
  description = 'RNA-Seq pipeline for VizFaDa' 
  author = 'Laura Morel'
  nextflowVersion = '>=20.01.0'
}

/* 
 * defines execution profiles for different environments  
 */ 

params {
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  max_cpus=16
  max_memory=64.GB
}

process {
  cpus = { check_max( 1 * task.attempt, 'cpus') }
  memory = { check_max( 8.GB * task.attempt, 'memory') }

  errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  withLabel: salmon {
    cpus = 3
  }
  withLabel: R {
    memory = { check_max(8.GB * task.attempt, 'memory' )}
  }
  withLabel: canIgnore {
    errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'ignore' }
  }  
}

executor{
  $k8s {
    queueSize = 8
  }
}

profiles {
  genotoul { 
    includeConfig "${params.custom_config_base}/conf/genotoul.config"
    process.container = 'nextflow/rnaseq-nf:latest'
    params.max_memory=32.GB
    params.max_cpus=8
  }
  
  standard {
    process.container = 'nextflow/rnaseq-nf:latest'
  }
  
  slurm {
    process.container = 'nextflow/rnaseq-nf:latest'
    process.executor = 'slurm'
    singularity.enabled = true
  }
  
  batch {
    params.reads = 's3://rnaseq-nf/data/ggal/lung_{1,2}.fq'
    params.transcriptome = 's3://rnaseq-nf/data/ggal/transcript.fa'
    process.container = 'nextflow/rnaseq-nf:latest' 
    process.executor = 'awsbatch'
    process.queue = 'nextflow-ci'
    workDir = 's3://nextflow-ci/work'
    aws.region = 'eu-west-1'
    aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
  }

  's3-data' {
    process.container = 'nextflow/rnaseq-nf:latest'
    params.reads = 's3://rnaseq-nf/data/ggal/lung_{1,2}.fq'
    params.transcriptome = 's3://rnaseq-nf/data/ggal/transcript.fa'
  } 

  gls {
      params.transcriptome = 'gs://rnaseq-nf/data/ggal/transcript.fa'
      params.reads = 'gs://rnaseq-nf/data/ggal/gut_{1,2}.fq'
      params.multiqc = 'gs://rnaseq-nf/multiqc'
      process.executor = 'google-lifesciences'
      process.container = 'nextflow/rnaseq-nf:latest'
      workDir = 'gs://rnaseq-nf/scratch' // <- replace with your own bucket!
      google.region  = 'europe-west2'
  }  

  'gs-data' {
      process.container = 'nextflow/rnaseq-nf:latest'
      params.transcriptome = 'gs://rnaseq-nf/data/ggal/transcript.fa'
      params.reads = 'gs://rnaseq-nf/data/ggal/gut_{1,2}.fq'
  }

  conda {
    process.conda = "$baseDir/conda.yml"
  }

  k8s {
    storageClaimName = 'pvc-vizfada'
    namespace = 'guillaume-vizfada'
    context = 'guillaume-vizfada-context'
    params.max_memory=8.GB
    params.max_cpus=3
  }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
